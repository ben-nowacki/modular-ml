[build-system]
requires = ["setuptools>=65", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "modularml"
dynamic = ["version"]
description = "A library for modular, fast, and reproducible ML experimentation built for R&D."
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Benjamin Nowacki", email = "benjamin.nowacki@uconn.edu"},
    {name = "Tingkai Li", email = "tingkai.li@uconn.edu"},
    {name = "Chao Hu", email = "chao.hu@uconn.edu"}
]

requires-python = ">=3.10"
keywords = [
    "Machine learning",
    "Deep learning",
    "Reproducible research",
    "Neural networks",
    "Scientific computing",
    "Scientific machine learning"
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]


dependencies = [
    "numpy",
    "scipy",
    "pandas",
    "scikit-learn",
    "scikit-optimize",
    "nbformat",
    "joblib",
    "typing-extensions",
]

[project.urls]
Homepage = "https://github.com/REIL-UConn/modular-ml"
Repository = "https://github.com/REIL-UConn/modular-ml"
Issues = "https://github.com/REIL-UConn/modular-ml/issues"


[project.optional-dependencies]
torch = ["torch"]
tensorflow = ["tensorflow"]
optimize = ["optuna"]
docs = [
    "sphinx>=6",
    "sphinx_rtd_theme>=0.5",
    "pydata-sphinx-theme",
    "sphinx_design",
    "sphinx-copybutton",
    "myst-parser",
    "sphinx-inline-tabs",
    "sphinxcontrib-bibtex",
    "sphinx-autobuild",
    "sphinx-last-updated-by-git",
    "nbsphinx",
    "ipykernel",
    "ipywidgets",
    "sphinx-gallery",
    "sphinx-docsearch",
]
examples = [
    "jupyter",
    "ipykernel",
    "ipywidgets",
]
plot = [
    "matplotlib",
    "rich",
]
dev = [
    "pre-commit",           # For working with pre-commit hooks
    "ruff",                 # For code style checks (linting and auto-formatting)
    "nox",                  # For running testing sessions
    "pytest>=8",            # For unit testing
    "pytest-cov",           # For coverage tests
    "pytest-xdist",         # For parallel test runs
    "pytest-doctestplus",   # For better doctesting
    "pytest-dependency",    # For pytest dependencies
    "pytest-order",         # For ordered pytest execution
    "nbmake",               # For testing Jupyter notebooks
    "importlib.metadata",
]
all = [
    "modularml[torch,tensorflow,optimize,examples,plot]"
]
all-torch = [
    "modularml[torch,optimize,examples,plot]"
]
all-tf = [
    "modularml[tensorflow,optimize,examples,plot]"
]


[tool.pytest.ini_options]
minversion = "8"
addopts = ["-vra", "--strict-config", "--strict-markers"]
testpaths = ["tests"]
markers = [
    "unit: fast, isolated unit tests",
    "integration: integration tests (multiple components together)",
]

# Logging configuration
log_cli = true
log_cli_level = "INFO"
log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"


[tool.coverage.run]
source = ["modularml"]
disable_warnings = ["couldnt-parse", "module-not-measured"]


[tool.setuptools.packages.find]
where = ["."]
include = ["modularml"]
exclude = ["docs*", "examples*"]

[tool.setuptools_scm]
version_scheme = "post-release"
local_scheme = "no-local-version"
